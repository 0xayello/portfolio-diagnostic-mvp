/**
 * Script de teste espec√≠fico para o token Meteora (MET)
 * 
 * Dados esperados conforme CoinMarketCap:
 * - Total de eventos: 71 unlocks
 * - Quantidade por evento: 7.32M MET (~$3.35M)
 * - Porcentagem: 0.73% do max supply por unlock
 * - Max supply: 1B MET
 * - Frequ√™ncia: Mensal (dia 22 de cada m√™s)
 * 
 * Uso: npx ts-node scripts/test-meteora.ts
 */

import { CoinMarketCapService } from '../src/services/coinmarketcap';

async function testMeteoraUnlocks() {
  console.log('üåü Testando API do CoinMarketCap com token METEORA (MET)\n');
  console.log('='.repeat(60));
  console.log('\nüìä DADOS ESPERADOS (conforme CoinMarketCap):');
  console.log('   ‚Ä¢ Total de eventos: 71 unlocks');
  console.log('   ‚Ä¢ Quantidade: 7.32M MET por evento');
  console.log('   ‚Ä¢ Porcentagem: 0.73% do max supply');
  console.log('   ‚Ä¢ Max supply: 1B MET');
  console.log('   ‚Ä¢ Frequ√™ncia: Mensal (dia 22)');
  console.log('='.repeat(60));

  const service = new CoinMarketCapService();
  
  // Poss√≠veis s√≠mbolos para Meteora
  const possibleSymbols = ['MET', 'METEORA', 'METORA'];
  
  console.log('\nüìã Testando s√≠mbolos poss√≠veis:');
  console.log(`   ${possibleSymbols.join(', ')}\n`);

  for (const symbol of possibleSymbols) {
    console.log(`\n${'‚îÄ'.repeat(60)}`);
    console.log(`üîç Testando s√≠mbolo: ${symbol}`);
    console.log(`${'‚îÄ'.repeat(60)}\n`);

    try {
      const startTime = Date.now();
      
      // Buscar unlocks
      const unlocks = await service.getUpcomingUnlocks([symbol], 180);
      
      const endTime = Date.now();
      const duration = endTime - startTime;

      if (unlocks.length > 0) {
        console.log(`‚úÖ SUCESSO! Encontrado como "${symbol}"\n`);
        console.log(`‚è±Ô∏è  Tempo de resposta: ${duration}ms`);
        console.log(`üì¶ Total de unlocks retornados: ${unlocks.length}\n`);
        
        // Comparar com dados esperados do CMC
        const expectedTotal = 71;
        const expectedAmount = 7320000; // 7.32M
        const expectedPercentage = 0.73;
        
        console.log('üîç VALIDA√á√ÉO DOS DADOS:\n');
        
        if (unlocks.length === expectedTotal) {
          console.log(`   ‚úÖ Total de eventos: ${unlocks.length} (esperado: ${expectedTotal})`);
        } else if (unlocks.length > 0) {
          console.log(`   ‚ö†Ô∏è  Total de eventos: ${unlocks.length} (esperado: ${expectedTotal})`);
          console.log(`   ‚ÑπÔ∏è  Pode estar mostrando apenas eventos futuros`);
        }
        
        // Verificar primeiro unlock
        const firstUnlock = unlocks[0];
        const amountMatch = Math.abs(firstUnlock.amount - expectedAmount) < 100000;
        const percentageMatch = Math.abs(firstUnlock.percentage - expectedPercentage) < 0.01;
        
        if (amountMatch) {
          console.log(`   ‚úÖ Quantidade por unlock: ${firstUnlock.amount.toLocaleString()} (esperado: ${expectedAmount.toLocaleString()})`);
        } else {
          console.log(`   ‚ö†Ô∏è  Quantidade por unlock: ${firstUnlock.amount.toLocaleString()} (esperado: ${expectedAmount.toLocaleString()})`);
        }
        
        if (percentageMatch) {
          console.log(`   ‚úÖ Porcentagem: ${firstUnlock.percentage.toFixed(2)}% (esperado: ${expectedPercentage}%)`);
        } else {
          console.log(`   ‚ö†Ô∏è  Porcentagem: ${firstUnlock.percentage.toFixed(2)}% (esperado: ${expectedPercentage}%)`);
        }
        
        console.log('\nüîì Pr√≥ximos 10 unlocks:\n');
        
        unlocks.slice(0, 10).forEach((unlock, index) => {
          console.log(`${index + 1}. ${unlock.token}`);
          console.log(`   üìÖ Data: ${unlock.unlockDate}`);
          console.log(`   üí∞ Quantidade: ${unlock.amount.toLocaleString()} tokens`);
          console.log(`   üìä Porcentagem do supply: ${unlock.percentage.toFixed(2)}%`);
          console.log(`   üö® Severidade: ${unlock.percentage >= 10 ? 'RED üî¥' : 'YELLOW üü°'}`);
          console.log();
        });
        
        if (unlocks.length > 10) {
          console.log(`   ... e mais ${unlocks.length - 10} eventos\n`);
        }

        // An√°lise dos dados
        console.log('üìà AN√ÅLISE:');
        const totalPercentage = unlocks.reduce((sum, u) => sum + u.percentage, 0);
        const avgPercentage = totalPercentage / unlocks.length;
        const maxUnlock = unlocks.reduce((max, u) => u.percentage > max.percentage ? u : max, unlocks[0]);
        const minUnlock = unlocks.reduce((min, u) => u.percentage < min.percentage ? u : min, unlocks[0]);
        
        console.log(`   ‚Ä¢ Total a ser desbloqueado: ${totalPercentage.toFixed(2)}% do supply`);
        console.log(`   ‚Ä¢ M√©dia por evento: ${avgPercentage.toFixed(2)}%`);
        console.log(`   ‚Ä¢ Maior unlock: ${maxUnlock.percentage.toFixed(2)}% em ${maxUnlock.unlockDate}`);
        console.log(`   ‚Ä¢ Menor unlock: ${minUnlock.percentage.toFixed(2)}% em ${minUnlock.unlockDate}`);
        
        const highRisk = unlocks.filter(u => u.percentage >= 10).length;
        const mediumRisk = unlocks.filter(u => u.percentage >= 1 && u.percentage < 10).length;
        const lowRisk = unlocks.filter(u => u.percentage < 1).length;
        
        console.log(`   ‚Ä¢ Unlocks de alto risco (‚â•10%): ${highRisk}`);
        console.log(`   ‚Ä¢ Unlocks de m√©dio risco (1-10%): ${mediumRisk}`);
        console.log(`   ‚Ä¢ Unlocks de baixo risco (<1%): ${lowRisk}`);
        
        // An√°lise temporal
        const now = new Date();
        const next30Days = unlocks.filter(u => {
          const unlockDate = new Date(u.unlockDate);
          const diff = unlockDate.getTime() - now.getTime();
          return diff <= 30 * 24 * 60 * 60 * 1000;
        });
        
        const next90Days = unlocks.filter(u => {
          const unlockDate = new Date(u.unlockDate);
          const diff = unlockDate.getTime() - now.getTime();
          return diff <= 90 * 24 * 60 * 60 * 1000;
        });
        
        console.log(`\n‚è∞ PR√ìXIMOS UNLOCKS:`);
        console.log(`   ‚Ä¢ Pr√≥ximos 30 dias: ${next30Days.length} eventos (${next30Days.reduce((sum, u) => sum + u.percentage, 0).toFixed(2)}%)`);
        console.log(`   ‚Ä¢ Pr√≥ximos 90 dias: ${next90Days.length} eventos (${next90Days.reduce((sum, u) => sum + u.percentage, 0).toFixed(2)}%)`);

        return; // Encontrou, pode parar
        
      } else {
        console.log(`‚ö†Ô∏è  Nenhum unlock encontrado para "${symbol}"`);
        console.log(`   (Pode n√£o ter unlocks programados ou s√≠mbolo incorreto)`);
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao buscar "${symbol}":`);
      if (error instanceof Error) {
        console.error(`   ${error.message}`);
      }
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('\nüí° DICAS:');
  console.log('   ‚Ä¢ Se nenhum s√≠mbolo funcionou, o token pode n√£o estar no CMC');
  console.log('   ‚Ä¢ Verifique o s√≠mbolo correto em: https://coinmarketcap.com/');
  console.log('   ‚Ä¢ O endpoint de unlocks pode n√£o estar dispon√≠vel no seu plano');
  console.log('   ‚Ä¢ Certifique-se de que COINMARKETCAP_API_KEY est√° configurada\n');
}

// Executar teste
testMeteoraUnlocks().catch(error => {
  console.error('\n‚ùå ERRO FATAL:', error);
  process.exit(1);
});

